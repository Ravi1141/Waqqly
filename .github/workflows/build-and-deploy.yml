name: Build and Deploy Docker Images

on:
  push:
    branches:
      - devops

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{vars.AWS_REGION}}

      - name: Login to AWS ECR
        run: aws ecr get-login-password --region ${{vars.AWS_REGION}} | docker login --username AWS --password-stdin ${{vars.ECR_REPO_URL}}

      - name: Build and Push Docker Images
        run: |
          # Loop through directories, build images, and push to ECR
             for folder in */; do
                 # Skip directories if they are actually symbolic links
                 if [ -L "$folder" ]; then
                     continue
                 fi

                 cd "$folder" || { echo "Failed to change directory to $folder"; exit 1; }

                 image_name="waqqly-${folder%/}"
                 echo "Building $image_name"
                 
                 # Enclose variables in double quotes to prevent word splitting and pathname expansion
                 docker buildx build -t "${{vars.ECR_REPO_URL}}/$image_name:latest" . || { echo "Failed to build $image_name"; exit 1; }
                 docker push "${{vars.ECR_REPO_URL}}/$image_name:latest" || { echo "Failed to push $image_name"; exit 1; }
                 
                 cd ..
             done

      - name: Copy Docker Compose file to Server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ vars.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SERVER_PORT }}
          source: "docker-compose.prod.yml"
          target: "/home/ec2/docker-compose.prod.yml"
          overwrite: true

      - name: SSH into Server and Run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ vars.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SERVER_PORT }}
          script: |
            cd /home/ec2
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d --pull always

            docker rmi $(docker images -f "dangling=true" -q)
